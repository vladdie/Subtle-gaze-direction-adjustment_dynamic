#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
//in vec2 TexCoord0;                                                                  
//in vec3 Normal0; 


// Ouput data
layout(location = 0) out vec4 fragColor;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform vec3 LightPosition_worldspace;
uniform bool fadeIn;
uniform bool attractor;
uniform float transparency;
uniform bool normalMap;
uniform bool colorSwitch;

/*vec3 CalcBumpedNormal()                                                                     
{                                                                                           
    vec3 Normal = normalize(Normal0);                                                       
    vec3 Tangent = normalize(Tangent0);                                                     
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);                           
    vec3 Bitangent = cross(Tangent, Normal);                                                
    vec3 BumpMapNormal = texture(gNormalMap, TexCoord0).xyz;                                
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);                              
    vec3 NewNormal;                                                                         
    mat3 TBN = mat3(Tangent, Bitangent, Normal);                                            
    NewNormal = TBN * BumpMapNormal;                                                        
    NewNormal = normalize(NewNormal);                                                       
    return NewNormal;                                                                       
} */    

void main(){

	vec3 LightColor = vec3(1,1,1);
	float LightPower = 300.0f;
	
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	float distance = length( LightPosition_worldspace - Position_worldspace );

	vec3 n = normalize( Normal_cameraspace );
	//vec3 n = normalize( Normal_cameraspace );
	vec3 l = normalize( LightDirection_cameraspace );
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(EyeDirection_cameraspace);
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
	vec3 color = MaterialAmbientColor +
			MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
			MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

	if(fadeIn)
	{
		//fragColor = vec4(0.2,0.1,0.1, transparency);
		if(colorSwitch){
			fragColor = vec4(0.2,0.1,0.1, transparency);//red color modulation
		}
		else{
			fragColor = vec4(0.1,0.2,0.1, transparency);//green color modulation
		}
	}
	else
	{
	  if(attractor){
		//fragColor = vec4(0.2,0.1,0, 0.3);
		if(colorSwitch){
			fragColor = vec4(0.2,0.1,0.1, 0.3);
		}
		else{
			fragColor = vec4(0.1,0.2,0.1, 0.3);
		}
	  }else{
		fragColor = vec4(color, 1.0);}
	}
}